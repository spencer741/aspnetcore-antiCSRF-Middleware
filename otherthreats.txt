
https://stackoverflow.com/questions/16049721/how-is-using-synchronizer-token-pattern-to-prevent-csrf-safe
=====================================================Depreciated==========================
Anyways, the bottom line is that I want my threat vectors to extend beyond trusting that the user will use Chrome or Mozilla that adhere to protocols like same-origin policy and updating proper referrer headers. In reality, anybody can create a http client that doesn’t enforce these rules, so this essentially can leave webpages open to CSRF attacks if the attacker does enough investigating on how the legitimate server mitigates requests (especially from the login page). I would like to get into the different login methods developers use for their frontend, but that is likely to long for this.

I wrote up a short scenario below:

User browses for the company they have an account with but get led to an illegitimate site that is pretending to act on behalf of the legitimate company. In this attack, ultimately, the user gets tricked into giving their credentials on a malicious page that either imitates or claims to have affiliation with the legitimate website they would normally log on to. (you see this often with mistyped urls www.microsoft.com vs www.micosoft.com could be an example where an attacker will reserve a mistyped domain name of a popular company to try to assume its identity and prune access tokens from the legitimate company via tricking users).

So, the malicious server receives the user credentials and tries to obtain access tokens on the user’s behalf by accessing the legitimate server’s endpoints (which were obtained by accessing the legitimate website’s login page).

This is known as login-CSRF which is, in my opinion, the most detrimental type of CSRF. The prevention of this type of CSRF is rooted in first preventing XSS on the client. The vast majority of XSS preventions can be bypassed by implementing what I like to call a compromised browser (or a rouge http client). This is a browser or client that doesn’t conform to browser standards such as Chromium or Mozilla, or those of w3c. Because in reality, you don’t need a browser to retrieve a webpage or submit login credentials. Theoretically, anybody can create an http request client, contact endpoints, and ignore any of the read-only flags, or same-origin protocols that are commonly implemented in popular browsers.

My philosophy with security in general is to be unpredictable to any possible advisories. I want to work on a solution for web apps so developers in the app sec community can push the threat vector to new heights, specifically in terms of login-CSRF. It would be awesome to develop a cryptographic solution to hide pre-session or session tokens in the html body… or rather within the request itself, since even "hidden" tokens in submit forms are easily viewable and thus parsable (assuming the attacker is using his own http client that is not a mainstream browser).

Again, it would probably be best to do more literature review before approaching something like this, which I am slowly hammering away on. And perhaps my viewpoint of all of this is playing off of my lack of knowledge.
